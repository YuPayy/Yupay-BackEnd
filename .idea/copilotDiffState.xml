<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/modules/friends/friends.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/modules/friends/friends.controller.ts" />
              <option name="originalContent" value="import { Request, Response } from &quot;express&quot;;&#10;import { addFriendService, confirmFriendService, listFriendsService, searchFriendService, unfriendService } from &quot;./friends.service&quot;;&#10;&#10;// Add friend&#10;export const addFriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        const { targetUserId } = req.body;&#10;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;&#10;        // pastikan targetUserId number&#10;        const targetId = Number(targetUserId);&#10;        if (!targetUserId || isNaN(targetId)) {&#10;            return res.status(400).json({ error: &quot;targetUserId must be a valid number&quot; });&#10;        }&#10;        if (userId === targetId) {&#10;            return res.status(400).json({ error: &quot;You cannot add yourself as a friend&quot; });&#10;        }&#10;&#10;        const friendRequest = await addFriendService(userId, targetId);&#10;&#10;        res.status(201).json({&#10;            message: &quot;Friend request sent&quot;,&#10;            data: friendRequest,&#10;        });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Confirm friend&#10;export const confirmFriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const { friendId } = req.body;&#10;        const userId = (req.user as any)?.userId;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;&#10;        const targetId = Number(friendId);&#10;        if (!friendId || isNaN(targetId)) {&#10;            return res.status(400).json({ error: &quot;friendId must be a valid number&quot; });&#10;        }&#10;&#10;        const result = await confirmFriendService(userId, targetId);&#10;        res.status(200).json(result);&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Daftar teman&#10;export const listFriendsController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;        const friends = await listFriendsService(userId);&#10;        res.status(200).json({ friends });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Search friend by user_id (atau username/email jika ingin)&#10;export const searchFriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const { userId, username, email } = req.query;&#10;&#10;        if (!userId &amp;&amp; !username &amp;&amp; !email) {&#10;            return res.status(400).json({ error: &quot;Provide userId, username, or email to search&quot; });&#10;        }&#10;&#10;        const result = await searchFriendService({&#10;            userId: userId ? Number(userId) : undefined,&#10;            username: username ? String(username) : undefined,&#10;            email: email ? String(email) : undefined,&#10;        });&#10;&#10;        if (!result) {&#10;            return res.status(404).json({ error: &quot;User not found&quot; });&#10;        }&#10;&#10;        res.status(200).json({ user: result });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;export const unfriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        const { targetUserId } = req.body;&#10;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;        const targetId = Number(targetUserId);&#10;        if (!targetUserId || isNaN(targetId)) {&#10;            return res.status(400).json({ error: &quot;targetUserId must be a valid number&quot; });&#10;        }&#10;        if (userId === targetId) {&#10;            return res.status(400).json({ error: &quot;You cannot unfriend yourself&quot; });&#10;        }&#10;&#10;        const result = await unfriendService(userId, targetId);&#10;&#10;        if (result.count === 0) {&#10;            return res.status(404).json({ error: &quot;Friendship not found&quot; });&#10;        }&#10;&#10;        res.status(200).json({ message: &quot;Unfriended successfully&quot; });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;" />
              <option name="updatedContent" value="import { Request, Response } from &quot;express&quot;;&#10;import { addFriendService, confirmFriendService, listFriendsService, searchFriendService, unfriendService, listPendingFriendsService } from &quot;./friends.service&quot;;&#10;&#10;// Add friend&#10;export const addFriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        const { targetUserId } = req.body;&#10;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;&#10;        // pastikan targetUserId number&#10;        const targetId = Number(targetUserId);&#10;        if (!targetUserId || isNaN(targetId)) {&#10;            return res.status(400).json({ error: &quot;targetUserId must be a valid number&quot; });&#10;        }&#10;        if (userId === targetId) {&#10;            return res.status(400).json({ error: &quot;You cannot add yourself as a friend&quot; });&#10;        }&#10;&#10;        const friendRequest = await addFriendService(userId, targetId);&#10;&#10;        res.status(201).json({&#10;            message: &quot;Friend request sent&quot;,&#10;            data: friendRequest,&#10;        });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Confirm friend&#10;export const confirmFriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const { friendId } = req.body;&#10;        const userId = (req.user as any)?.userId;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;&#10;        const targetId = Number(friendId);&#10;        if (!friendId || isNaN(targetId)) {&#10;            return res.status(400).json({ error: &quot;friendId must be a valid number&quot; });&#10;        }&#10;&#10;        const result = await confirmFriendService(userId, targetId);&#10;        res.status(200).json(result);&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Daftar teman&#10;export const listFriendsController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;        const friends = await listFriendsService(userId);&#10;        res.status(200).json({ friends });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Search friend by user_id (atau username/email jika ingin)&#10;export const searchFriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const { userId, username, email } = req.query;&#10;&#10;        if (!userId &amp;&amp; !username &amp;&amp; !email) {&#10;            return res.status(400).json({ error: &quot;Provide userId, username, or email to search&quot; });&#10;        }&#10;&#10;        const result = await searchFriendService({&#10;            userId: userId ? Number(userId) : undefined,&#10;            username: username ? String(username) : undefined,&#10;            email: email ? String(email) : undefined,&#10;        });&#10;&#10;        if (!result) {&#10;            return res.status(404).json({ error: &quot;User not found&quot; });&#10;        }&#10;&#10;        res.status(200).json({ user: result });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;export const unfriendController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        const { targetUserId } = req.body;&#10;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;        const targetId = Number(targetUserId);&#10;        if (!targetUserId || isNaN(targetId)) {&#10;            return res.status(400).json({ error: &quot;targetUserId must be a valid number&quot; });&#10;        }&#10;        if (userId === targetId) {&#10;            return res.status(400).json({ error: &quot;You cannot unfriend yourself&quot; });&#10;        }&#10;&#10;        const result = await unfriendService(userId, targetId);&#10;&#10;        if (result.count === 0) {&#10;            return res.status(404).json({ error: &quot;Friendship not found&quot; });&#10;        }&#10;&#10;        res.status(200).json({ message: &quot;Unfriended successfully&quot; });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};&#10;&#10;// Get all pending friend requests for the logged-in user&#10;export const listPendingFriendsController = async (req: Request, res: Response) =&gt; {&#10;    try {&#10;        const userId = (req.user as any)?.userId;&#10;        if (!userId) {&#10;            return res.status(401).json({ error: &quot;Unauthorized&quot; });&#10;        }&#10;        const pendingRequests = await listPendingFriendsService(userId);&#10;        res.status(200).json({ pending: pendingRequests });&#10;    } catch (err: any) {&#10;        res.status(400).json({ error: err.message });&#10;    }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/modules/friends/friends.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/modules/friends/friends.service.ts" />
              <option name="originalContent" value="import { PrismaClient } from &quot;@prisma/client&quot;;&#10;&#10;const prisma = new PrismaClient();&#10;&#10;export default prisma;&#10;export const addFriendService = async (userId: number, targetUserId: number) =&gt; {&#10;    return prisma.friendship.create({&#10;        data: {&#10;            user_id: userId,&#10;            friend_id: targetUserId,&#10;            status: &quot;PENDING&quot;,&#10;        },&#10;    });&#10;};&#10;&#10;// Unfriend (hapus pertemanan dua arah)&#10;export const unfriendService = async (userId: number, targetUserId: number) =&gt; {&#10;    return prisma.friendship.deleteMany({&#10;        where: {&#10;            OR: [&#10;                { user_id: userId, friend_id: targetUserId },&#10;                { user_id: targetUserId, friend_id: userId }&#10;            ]&#10;        }&#10;    });&#10;};&#10;&#10;&#10;export const confirmFriendService = async (userId: number, friendId: number) =&gt; {&#10;    return prisma.friendship.updateMany({&#10;        where: {&#10;            user_id: friendId,&#10;            friend_id: userId,&#10;            status: &quot;PENDING&quot;,&#10;        },&#10;        data: {&#10;            status: &quot;ACCEPTED&quot;,&#10;        },&#10;    });&#10;};&#10;&#10;export const searchFriendService = async ({&#10;                                              userId,&#10;                                              username,&#10;                                              email,&#10;                                          }: {&#10;    userId?: number;&#10;    username?: string;&#10;    email?: string;&#10;}) =&gt; {&#10;    return prisma.user.findFirst({&#10;        where: {&#10;            OR: [&#10;                userId ? { user_id: userId } : null,&#10;                username ? { username: { contains: username } } : null,&#10;                email ? { email: { contains: email } } : null,&#10;            ].filter(Boolean) as any, // &lt;-- kasih as any biar aman ke Prisma&#10;        },&#10;    });&#10;};&#10;&#10;&#10;// Daftar teman&#10;export const listFriendsService = async (userId: number) =&gt; {&#10;    return await prisma.friendship.findMany({&#10;        where: { user_id: userId, status: &quot;accepted&quot; },&#10;        include: {&#10;            friend: {&#10;                select: {&#10;                    user_id: true,&#10;                    username: true,&#10;                    email: true&#10;                }&#10;            }&#10;        }&#10;    });&#10;};&#10;" />
              <option name="updatedContent" value="import { PrismaClient } from &quot;@prisma/client&quot;;&#10;&#10;const prisma = new PrismaClient();&#10;&#10;export default prisma;&#10;export const addFriendService = async (userId: number, targetUserId: number) =&gt; {&#10;    return prisma.friendship.create({&#10;        data: {&#10;            user_id: userId,&#10;            friend_id: targetUserId,&#10;            status: &quot;PENDING&quot;,&#10;        },&#10;    });&#10;};&#10;&#10;// Unfriend (hapus pertemanan dua arah)&#10;export const unfriendService = async (userId: number, targetUserId: number) =&gt; {&#10;    return prisma.friendship.deleteMany({&#10;        where: {&#10;            OR: [&#10;                { user_id: userId, friend_id: targetUserId },&#10;                { user_id: targetUserId, friend_id: userId }&#10;            ]&#10;        }&#10;    });&#10;};&#10;&#10;&#10;export const confirmFriendService = async (userId: number, friendId: number) =&gt; {&#10;    return prisma.friendship.updateMany({&#10;        where: {&#10;            user_id: friendId,&#10;            friend_id: userId,&#10;            status: &quot;PENDING&quot;,&#10;        },&#10;        data: {&#10;            status: &quot;ACCEPTED&quot;,&#10;        },&#10;    });&#10;};&#10;&#10;export const searchFriendService = async ({&#10;                                              userId,&#10;                                              username,&#10;                                              email,&#10;                                          }: {&#10;    userId?: number;&#10;    username?: string;&#10;    email?: string;&#10;}) =&gt; {&#10;    return prisma.user.findFirst({&#10;        where: {&#10;            OR: [&#10;                userId ? { user_id: userId } : null,&#10;                username ? { username: { contains: username } } : null,&#10;                email ? { email: { contains: email } } : null,&#10;            ].filter(Boolean) as any, // &lt;-- kasih as any biar aman ke Prisma&#10;        },&#10;    });&#10;};&#10;&#10;&#10;// Daftar teman&#10;export const listFriendsService = async (userId: number) =&gt; {&#10;    return await prisma.friendship.findMany({&#10;        where: { user_id: userId, status: &quot;accepted&quot; },&#10;        include: {&#10;            friend: {&#10;                select: {&#10;                    user_id: true,&#10;                    username: true,&#10;                    email: true&#10;                }&#10;            }&#10;        }&#10;    });&#10;};&#10;&#10;export const listPendingFriendsService = async (userId: number) =&gt; {&#10;    return prisma.friendship.findMany({&#10;        where: {&#10;            friend_id: userId,&#10;            status: &quot;PENDING&quot;&#10;        },&#10;        include: {&#10;            user: {&#10;                select: {&#10;                    user_id: true,&#10;                    username: true,&#10;                    email: true&#10;                }&#10;            }&#10;        }&#10;    });&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>